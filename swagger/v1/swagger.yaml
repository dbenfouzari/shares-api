---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/{likeableType}/{likeableId}/likes":
    parameters:
    - name: likeableType
      in: path
      schema:
        "$ref": "#/components/schemas/LikeableType"
      required: true
    - name: likeableId
      in: path
      format: int64
      example: 1
      required: true
      schema:
        type: integer
    get:
      summary: Find all likes
      tags:
      - Likes
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Likes"
    post:
      summary: Create a single like
      tags:
      - Likes
      parameters: []
      responses:
        '201':
          description: like created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Like"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateLikeAttributes"
  "/{likeableType}/{likeableId}/likes/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    - name: likeableType
      in: path
      schema:
        "$ref": "#/components/schemas/LikeableType"
      required: true
    - name: likeableId
      in: path
      format: int64
      example: 1
      required: true
      schema:
        type: integer
    delete:
      summary: Delete a like given its ID
      tags:
      - Likes
      responses:
        '204':
          description: successful
  "/media":
    get:
      summary: Find all media
      tags:
      - Media
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Media"
    post:
      summary: Create a single medium
      tags:
      - Media
      parameters: []
      responses:
        '201':
          description: medium created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Medium"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateMediumAttributes"
  "/media/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get a medium by its ID
      tags:
      - Media
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Medium"
    patch:
      summary: Update a medium
      tags:
      - Media
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Medium"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateMediumAttributes"
    put:
      summary: Update a medium
      tags:
      - Media
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Medium"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateMediumAttributes"
    delete:
      summary: Delete a medium given its ID
      tags:
      - Media
      responses:
        '204':
          description: successful
  "/shares":
    get:
      summary: Find all shares
      tags:
      - Shares
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Shares"
    post:
      summary: Create a single share
      tags:
      - Shares
      parameters: []
      responses:
        '201':
          description: share created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Share"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateShareAttributes"
  "/shares/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get a share by its ID
      tags:
      - Shares
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Share"
    delete:
      summary: Delete a share given its ID
      tags:
      - Shares
      responses:
        '204':
          description: successful
  "/users":
    get:
      summary: Find all users
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Users"
    post:
      summary: Create a single user
      tags:
      - Users
      parameters: []
      responses:
        '201':
          description: user created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateUserAttributes"
  "/users/{id}":
    parameters:
    - name: id
      in: path
      required: true
      schema:
        type: string
    get:
      summary: Get a user by its ID
      tags:
      - Users
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
    patch:
      summary: Update a user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserAttributes"
    put:
      summary: Update a user
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/UpdateUserAttributes"
servers:
- url: http://localhost:4321
  description: Local docker-compose development
components:
  schemas:
    Timestamps:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
          description: Entity creation date and time
        updated_at:
          type: string
          format: date-time
          description: Entity update date and time
      required:
      - created_at
      - updated_at
    Media:
      type: array
      items:
        "$ref": "#/components/schemas/Medium"
    Medium:
      allOf:
      - type: object
        properties:
          id:
            type: integer
            format: int64
            description: Medium ID
            example: 1
          title:
            type: string
            description: Medium title
            example: Medium title
          description:
            type: string
            description: Medium description
            example: Medium description
            nullable: true
        required:
        - id
        - title
      - "$ref": "#/components/schemas/Timestamps"
    CreateMediumAttributes:
      type: object
      properties:
        title:
          type: string
          description: Medium title
          example: Medium title
        description:
          type: string
          description: Medium description
          example: Medium description
      required:
      - title
    UpdateMediumAttributes:
      type: object
      properties:
        title:
          type: string
          description: Medium title
          example: Medium title
        description:
          type: string
          description: Medium description
          example: Medium description
    User:
      allOf:
      - type: object
        properties:
          id:
            type: integer
            format: int64
            description: User ID
            example: 1
          first_name:
            type: string
            description: User first name
            example: John
          last_name:
            type: string
            description: User last name
            example: Doe
          email:
            type: string
            format: email
            description: User email
            example: john@doe.com
        required:
        - id
        - first_name
        - last_name
        - email
      - "$ref": "#/components/schemas/Timestamps"
    Users:
      type: array
      items:
        "$ref": "#/components/schemas/User"
    CreateUserAttributes:
      type: object
      properties:
        first_name:
          type: string
          description: User first name
          example: John
        last_name:
          type: string
          description: User last name
          example: Doe
        email:
          type: string
          format: email
          description: User email
          example: john@doe.com
      required:
      - id
      - first_name
      - last_name
      - email
    UpdateUserAttributes:
      type: object
      properties:
        first_name:
          type: string
          description: User first name
          example: John
          nullable: true
        last_name:
          type: string
          description: User last name
          example: Doe
          nullable: true
        email:
          type: string
          format: email
          description: User email
          example: john@doe.com
          nullable: true
    Share:
      allOf:
      - type: object
        properties:
          id:
            type: integer
            format: int64
            description: Share ID
            example: 1
          user_id:
            type: integer
            format: int64
            description: User ID
            example: 1
          medium_id:
            type: integer
            format: int64
            description: Medium ID
            example: 1
        required:
        - id
        - user_id
        - medium_id
      - "$ref": "#/components/schemas/Timestamps"
    Shares:
      type: array
      items:
        "$ref": "#/components/schemas/Share"
    CreateShareAttributes:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          description: User ID
          example: 1
        medium_id:
          type: integer
          format: int64
          description: Medium ID
          example: 1
      required:
      - user_id
      - medium_id
    LikeableType:
      type: string
      enum:
      - shares
      - comments
    Like:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Like ID
          example: 1
        likable_id:
          type: integer
          format: int64
          description: Likeable ID
          example: 1
        likable_type:
          type: string
          enum:
          - Share
          - Comment
          description: Likeable type
          example: Share
        user_id:
          type: integer
          format: int64
          description: ID of user that liked the likeable
          example: 1
      required:
      - id
      - likable_id
      - likable_type
      - user_id
    Likes:
      type: array
      items:
        "$ref": "#/components/schemas/Like"
    CreateLikeAttributes:
      type: object
      properties:
        like:
          type: object
          properties:
            user_id:
              type: integer
              format: int64
              description: ID of user that liked the likeable
              example: 1
          required:
          - user_id
      required:
      - like
